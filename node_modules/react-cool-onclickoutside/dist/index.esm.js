import { useRef, useState, useEffect, useCallback } from 'react';

var canUsePassiveEvents = (function () {
  if (typeof window === "undefined" || typeof window.addEventListener !== "function") return false;
  var passive = false;
  var options = Object.defineProperty({}, "passive", {
    // eslint-disable-next-line getter-return
    get: function get() {
      passive = true;
    }
  });

  var noop = function noop() {
    return null;
  };

  window.addEventListener("test", noop, options);
  window.removeEventListener("test", noop, options);
  return passive;
});

var DEFAULT_IGNORE_CLASS = "ignore-onclickoutside";

var hasIgnoreClass = function hasIgnoreClass(e, ignoreClass) {
  var el = e.target;

  while (el) {
    var _el$classList;

    if ((_el$classList = el.classList) != null && _el$classList.contains(ignoreClass)) return true;
    el = el.parentElement;
  }

  return false;
};

var clickedOnScrollbar = function clickedOnScrollbar(e) {
  return document.documentElement.clientWidth <= e.clientX || document.documentElement.clientHeight <= e.clientY;
};

var getEventOptions = function getEventOptions(type) {
  return type.includes("touch") && canUsePassiveEvents() ? {
    passive: true
  } : false;
};

var useOnclickOutside = function useOnclickOutside(callback, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      refsOpt = _ref.refs,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$eventTypes = _ref.eventTypes,
      eventTypes = _ref$eventTypes === void 0 ? ["mousedown", "touchstart"] : _ref$eventTypes,
      _ref$excludeScrollbar = _ref.excludeScrollbar,
      excludeScrollbar = _ref$excludeScrollbar === void 0 ? false : _ref$excludeScrollbar,
      _ref$ignoreClass = _ref.ignoreClass,
      ignoreClass = _ref$ignoreClass === void 0 ? DEFAULT_IGNORE_CLASS : _ref$ignoreClass;

  var callbackRef = useRef(callback);

  var _useState = useState([]),
      refsState = _useState[0],
      setRefsState = _useState[1];

  useEffect(function () {
    callbackRef.current = callback;
  }, [callback]);
  var ref = useCallback(function (el) {
    setRefsState(function (prevState) {
      return [].concat(prevState, [{
        current: el
      }]);
    });
  }, []);
  useEffect(function () {
    if (!(refsOpt != null && refsOpt.length) && !refsState.length) return;

    var listener = function listener(e) {
      if (hasIgnoreClass(e, ignoreClass)) return;
      var refs = refsOpt || refsState;
      var els = [];
      refs.forEach(function (_ref2) {
        var current = _ref2.current;
        if (current) els.push(current);
      });
      if (excludeScrollbar && clickedOnScrollbar(e)) return;
      if (!els.length || !els.every(function (el) {
        return !el.contains(e.target);
      })) return;
      callbackRef.current(e);
    };

    var removeEventListener = function removeEventListener() {
      eventTypes.forEach(function (type) {
        // @ts-expect-error
        document.removeEventListener(type, listener, getEventOptions(type));
      });
    };

    if (disabled) {
      removeEventListener();
      return;
    }

    eventTypes.forEach(function (type) {
      document.addEventListener(type, listener, getEventOptions(type));
    }); // eslint-disable-next-line consistent-return

    return function () {
      removeEventListener();
    };
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [refsState, ignoreClass, excludeScrollbar, disabled, // eslint-disable-next-line react-hooks/exhaustive-deps
  JSON.stringify(eventTypes)]);
  return ref;
};

export default useOnclickOutside;
export { DEFAULT_IGNORE_CLASS };
